import java.util.Scanner; //This is used to get input from the console
import java.util.Random; //This is used to generate random numbers
//import any additional libraries you need here
import java.util.regex.Pattern;

// Comments on blocks are formatted with a <== ==> and regular line comments are formatted with a regular '//'

class Main {
    public static void main(String[] args) {
        int i; // Used for generic iteration, only so I don't have to use "int i = 0" each time, and instead declare "i = 0" only

        //Rather than having a simple input function, Java uses the scanner object to read input from various sources. This declares a new scanner object that will read inputs from the console (System.in). See https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html for offical documentation on the scanner class.
        Scanner input = new Scanner(System.in);

        //To create random numbers, you first need to create a new Random object. Afterwards you can use the object to generate random numbers using it's methods. See https://docs.oracle.com/javase/8/docs/api/java/util/Random.html for offical documentation on the random class. 
        Random random = new Random();

        //1) Create a variable and assign it the string "Hello World". Afterwards print that variable to the console.
        // System.out.println("\n\nExample 1:");
        String s = "Hello World!";
        System.out.println(s);


        //2) Prompt the user to enter their name, and assign it to a variable. Then print "Hello" followed by their name to the console.
        // System.out.println("\n\nExample 2:");
        System.out.println("Enter Your Name:");
        String name = input.nextLine();
        System.out.printf("Hello %s!\n", name);


        //3) Prompt the user to enter an integer, assigning their response to a variable. Then create an if block that will check if that number is less than, equals to, or greater than 0 and prints which case it is back to the user. 
        //Note: that the tests are looking for "equal to", "less than", or "greater than" to be printed.
        // System.out.println("\n\nExample 3:");
        int userIn;

        userIn = -1;

        do {
            System.out.println("Input an integer value:");
            if (input.hasNextInt()) {
                userIn = input.nextInt();
                break;
            } else {
                input.nextLine();
                System.out.println("Could not resolve integer from input.");
                continue;
            }
        } while (!input.hasNextInt());

        if (userIn < 0) {
            System.out.println("less than");
        } else if (userIn == 0) {
            System.out.println("equal to");
        } else {
            System.out.println("greater than");
        }

        //4) Prompt the user for a positive number, then use a loop to print all the numbers between 0 and up to but not including that number to the console. Afterwards print out the sum of the numbers printed.
        // System.out.println("\n\nExample 4:");
        // <== Declaring integer as negative first so "do ... while" loop functions ==> //

        // <== "do ... while" loop to ensure user input is positive ==> //

        userIn = -1;

        do {
            System.out.println("Input a positive integer value:");
            if (input.hasNextInt()) {
                userIn = input.nextInt();
                if (userIn > 0) {
                    break;
                } else {
                    System.out.println("not a positive number");
                }
            } else {
                input.nextLine();
                System.out.println("not a number");
                continue;
            }
        } while (!input.hasNextInt() && userIn < 0);

        int numSum = 0;

        // <== For Loop to Print Numbers From 0 to ex4int-1 ==> //
        for (i = 0; i < userIn; i++) {
            numSum += i;
            System.out.println(i);
        }

        System.out.println(numSum);


        //5) Using a loop, print out 10 randomly generated numbers between 1 and 100 (inclusive). Afterwards, print out what the smallest, the largest and the average value of the random num ers were.
        //Note: There are no unit tests for this problem due to the pseudorandom nature of the numbers.
        // System.out.println("\n\nExample 5:");
        // <== Declares variables for assignment, all with a default value of 0 ==> // 
        int biggest = 0;
        int smallest = 0;
        float average = 0;

        // <== For loop that generates 10 pseudorandom numbers from 1-100 ==> //
        for (i = 0; i < 10; i++) {
        // <== Random numbers generated by a computer are never truly random, which is why they are called "Pseudorandom" numbers ==> //
        // <== Random numbers are generated with both a seed and a random external source, such as system time ==> //
            int pseudoRand = random.nextInt(100) + 1;

        // <== "if ... else if ... else" block to sort out the biggest and smallest numbers ==> //
        // <== Sets the biggest and smallest to the same number on the first iteration ==> //
        // <== Does this to ensure biggest and smallest numbers can be assigned accurately ==> //
        // <== If number is less than smallest, smallest is set to the new number ==> //
        // <== If number is greater than biggest, biggest is set to new number ==> //
        // <== If it is in between, number is ONLY appended to the average ==> //
            if (i == 0) {
                biggest = smallest = pseudoRand;
                average += pseudoRand;
            } else if (pseudoRand > biggest) {
                biggest = pseudoRand;
                average += pseudoRand;
            } else if (pseudoRand < smallest) {
                smallest = pseudoRand;
                average += pseudoRand;
            } else {
                average += pseudoRand;
            }

            // prints the pseudorandom integer.
            System.out.println(pseudoRand);
        }

        // Divides the sum of all the psuedorandom numbers by the number of iterations to get the overall average.
        average = average / i;

        // Prints results
        System.out.printf("Biggest Number: %d\n", biggest);
        System.out.printf("Smallest Number: %d\n", smallest);
        System.out.printf("Overall Average: %.2f\n", average);

        //6) Create an input verification loop that won't exit until the user enters a positive integer.
        // <== Same code from example 4 ==> //
        // System.out.println("\n\nExample 6:");

        userIn = -1;

        do {
            System.out.println("Input a positive integer value:");
            if (input.hasNextInt()) {
                userIn = input.nextInt();
                if (userIn > 0) {
                    break;
                } else {
                    System.out.println("not a positive number");
                }
            } else {
                input.nextLine();
                System.out.println("not a number");
                continue;
            }
        } while (!input.hasNextInt() && userIn < 0);


        //7) Ask the user to enter 2 integers. Create a loop that will count from the first number to the second number and print the results to the console on a single line, seperate by commas. For example, if given the numbers 2 and 5, you should print the string "2,3,4,5". Note that if the first number is larger than the second, you must count backwards!
        // System.out.println("\n\nExample 7:");
        int int1 = 0;
        int int2 = 0;

        System.out.println("Enter two integers:");
        do {
            System.out.println("Integer 1:");
            if (input.hasNextInt()) {
                int1 = input.nextInt();
                break;
            } else {
                input.nextLine();
                continue;
            }
        } while (!input.hasNextInt());
        do {
            System.out.println("Integer 2:");
            if (input.hasNextInt()) {
                int2 = input.nextInt();
                break;
            } else {
                input.nextLine();
                continue;
            }
        } while (!input.hasNextInt());

        if (int1 < int2) {
            for (i = int1; i <= int2; i++) {
                System.out.print(i);
                if (i < int2) {
                    System.out.print(",");
                }
            }
        } else if (int1 > int2) {
            for (i = int1; i >= int2; i--) {
                System.out.print(i);
                if (i > int2) {
                    System.out.print(",");
                }
            }
        }

        //8) Ask the user for their birth day in the form "mm/dd/yyyy" then print out the month, day and year the user was born on seperate lines. Ex: if the user enters "01/23/4567", print "Month: 01", "Day: 23", "Year: 4567".
        // System.out.println("\n\nExample 8:");
        String DoB;

        do {
            System.out.println("Enter your date of birth in the form \"mm/dd/yyyy\":");
            DoB = input.nextLine();
        } while (!checkDOBPattern(DoB));

        String[] DoBArray = DoB.split("/");

        System.out.printf("Month: %s\nDay: %s\nYear: %s\n", DoBArray[0], DoBArray[1], DoBArray[2]);


        //9) Make a loop that will count from 1 to 30 and print them to the console. However, if the number is a multiple of 3, print "fizz" instead; and if it's a multiple of 5, print "buzz" instead. If it's a multiple of both, print "fizzbuzz" instead of the number.
        // System.out.println("\n\nExample 9:");
        for (i = 1; i <= 30; i++) {
            if (i % 3 == 0 && i % 5 == 0) {
                System.out.println("fizzbuzz");
            } else if (i % 3 == 0) {
                System.out.println("fizz");
            } else if (i % 5 == 0) {
                System.out.println("buzz");
            } else {
                System.out.println(i);
            }
        }



        input.close(); //scanners should be closed right before the program ends, if you close it earlier and try to reopen it, you will run into problems as input streams cannot be reopened once closed. 
    }

    private static boolean checkDOBPattern(String input) {
    // <== Compiles a regex pattern used to compare to a string input, used to make sure user has correct input formatting. Returns true or false. ==> //
    // <== For context, the regex format string is this "^(0[1-9]|1[0-2])/(0[1-9]|[12][0-9]|3[01])/(\\d{4})$" ==> //
    // <== I found this regex format string online, so the format string isnt mine. The rest of the format checking is just the basic usage of the regex.Pattern module in java utils. ==> // 
        Pattern regex = Pattern.compile("^(0[1-9]|1[0-2])/(0[1-9]|[12][0-9]|3[01])/(\\d{4})$");

        // <== Returns a true or false value depending on if the inputs format matches the regex format ==> //
        return regex.matcher(input).matches();
    }
}